{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" <h1>\\r\\n        {{ $store.state.isAuth ? \\\"User Autorised\\\" : \\\"Log in to use the services\\\"}}\\r\\n        <my-button v-if=\\\"$store.state.isAuth === false\\\" @click=\\\"$store.state.isAuth = true\\\">Log in</my-button>\\r\\n        <my-button v-else @click=\\\"$store.state.isAuth = false\\\">Log out</my-button>\\r\\n    </h1>\\r\\n    <h1>\\r\\n        {{ $store.getters.doubleLikes }}\\r\\n    </h1>\\r\\n    <div>\\r\\n        <my-button @click=\\\"$store.commit('incrementLikes')\\\">\\r\\n            Like\\r\\n        </my-button>\\r\\n        <my-button @click=\\\"$store.commit('decrementLikes')\\\">\\r\\n            Dislike\\r\\n        </my-button>\\r\\n    </div> \"), _createCommentVNode(\" <h1>\\r\\n        Page with posts\\r\\n    </h1>\\r\\n    <my-input\\r\\n        v-model=\\\"searchQuery\\\"\\r\\n        placeholder=\\\"Search\\\"\\r\\n        v-focus\\r\\n    />\\r\\n    <div class=\\\"app__btns\\\">\\r\\n        <my-button\\r\\n        @click=\\\"showDialog\\\"\\r\\n    >\\r\\n        Create Post\\r\\n    </my-button>\\r\\n    <my-select\\r\\n        v-model=\\\"selectedSort\\\"\\r\\n        :options=\\\"SortOptions\\\"\\r\\n    />\\r\\n    </div>\\r\\n    \\r\\n    <my-dialog v-model:show='dialogVisible'>\\r\\n        <post-form\\r\\n        @create=\\\"createPost\\\"\\r\\n        />\\r\\n    </my-dialog>\\r\\n    \\r\\n    <post-list\\r\\n    :posts=\\\"sortedAndSearchedPosts\\\"\\r\\n    @remove=\\\"removePost\\\"\\r\\n    v-if=\\\"!isPostsLoading\\\"\\r\\n    />\\r\\n    <div v-else>Now Loading . . .</div>\\r\\n    <div v-intersection=\\\"loadMorePosts\\\" class=\\\"observer\\\">\\r\\n\\r\\n    </div> \"), _createCommentVNode(\" <div class=\\\"page__wrapper\\\">\\r\\n        <div \\r\\n        v-for=\\\"pageNumber in totalPages\\\"\\r\\n        :key=\\\"pageNumber\\\"\\r\\n        class=\\\"page\\\"\\r\\n        :class=\\\"{\\r\\n            'current-page':page === pageNumber\\r\\n        }\\\"\\r\\n        @click=\\\"changePage(pageNumber)\\\"\\r\\n        >\\r\\n            {{ pageNumber }}\\r\\n        </div>\\r\\n    </div> \")]);\n}","map":{"version":3,"names":["_createElementBlock","_createCommentVNode"],"sources":["D:\\folderforsite\\src\\pages\\PostPagewithstore.vue"],"sourcesContent":["<template>\r\n<div>\r\n    <!-- <h1>\r\n        {{ $store.state.isAuth ? \"User Autorised\" : \"Log in to use the services\"}}\r\n        <my-button v-if=\"$store.state.isAuth === false\" @click=\"$store.state.isAuth = true\">Log in</my-button>\r\n        <my-button v-else @click=\"$store.state.isAuth = false\">Log out</my-button>\r\n    </h1>\r\n    <h1>\r\n        {{ $store.getters.doubleLikes }}\r\n    </h1>\r\n    <div>\r\n        <my-button @click=\"$store.commit('incrementLikes')\">\r\n            Like\r\n        </my-button>\r\n        <my-button @click=\"$store.commit('decrementLikes')\">\r\n            Dislike\r\n        </my-button>\r\n    </div> -->\r\n    <!-- <h1>\r\n        Page with posts\r\n    </h1>\r\n    <my-input\r\n        v-model=\"searchQuery\"\r\n        placeholder=\"Search\"\r\n        v-focus\r\n    />\r\n    <div class=\"app__btns\">\r\n        <my-button\r\n        @click=\"showDialog\"\r\n    >\r\n        Create Post\r\n    </my-button>\r\n    <my-select\r\n        v-model=\"selectedSort\"\r\n        :options=\"SortOptions\"\r\n    />\r\n    </div>\r\n    \r\n    <my-dialog v-model:show='dialogVisible'>\r\n        <post-form\r\n        @create=\"createPost\"\r\n        />\r\n    </my-dialog>\r\n    \r\n    <post-list\r\n    :posts=\"sortedAndSearchedPosts\"\r\n    @remove=\"removePost\"\r\n    v-if=\"!isPostsLoading\"\r\n    />\r\n    <div v-else>Now Loading . . .</div>\r\n    <div v-intersection=\"loadMorePosts\" class=\"observer\">\r\n\r\n    </div> -->\r\n    <!-- <div class=\"page__wrapper\">\r\n        <div \r\n        v-for=\"pageNumber in totalPages\"\r\n        :key=\"pageNumber\"\r\n        class=\"page\"\r\n        :class=\"{\r\n            'current-page':page === pageNumber\r\n        }\"\r\n        @click=\"changePage(pageNumber)\"\r\n        >\r\n            {{ pageNumber }}\r\n        </div>\r\n    </div> -->\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport PostForm from \"@/components/PostForm\";\r\nimport PostList from \"@/components/PostList\";\r\nimport PostItem from \"@/components/PostItem\";\r\nimport axios from 'axios'\r\nexport default {\r\n    components: {\r\n        PostForm, PostList,PostItem\r\n    },\r\n    data() {\r\n        return{\r\n            posts: [],\r\n            dialogVisible:false,\r\n            isPostsLoading: false,\r\n            selectedSort:'',\r\n            searchQuery:'',\r\n            page:1,\r\n            limit:10,\r\n            totalPages:0,\r\n            SortOptions:[\r\n                {value:'title', name:'By Name'},\r\n                {value:'body', name:'By Description'},\r\n            ]\r\n        }\r\n    },\r\n    methods: {\r\n        createPost(post) {\r\n            this.posts.push(post);\r\n            this.dialogVisible = false\r\n        },\r\n        removePost(post){\r\n            this.posts = this.posts.filter(p => p.id !== post.id)\r\n        },\r\n        showDialog(){\r\n            this.dialogVisible=true;\r\n        },\r\n        // changePage(pageNumber){\r\n        //     this.page = pageNumber\r\n        // },\r\n        \r\n    },\r\n    mounted(){\r\n        this.fetchPosts();\r\n        // const option ={\r\n        //     rootMargin:'0px',\r\n        //     threshold:1.0\r\n        // }\r\n        // const callback = (entries,observer) => {\r\n        //     if(entries[0].isIntersecting && this.page<this.totalPages){\r\n        //         this.loadMorePosts()\r\n        //     }\r\n        // };\r\n        // const observer = new IntersectionObserver(callback,option);\r\n        // observer.observe(this.$refs.observer);\r\n    },\r\n    computed:{\r\n        \r\n    },\r\n    watch:{\r\n        // page(){\r\n        //     this.fetchPosts()\r\n        // }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.app__btns{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 15px 0;\r\n}\r\n.page__wrapper{\r\n    display: flex;\r\n    margin-top: 15px;\r\n}\r\n.page{\r\n    border: 1px solid black;\r\n    padding: 10px;\r\n}\r\n.current-page{\r\n    border: 2px solid teal;\r\n}\r\n.observer{\r\n    opacity: 0;\r\n    height:30px;\r\n    background: green;\r\n}\r\n</style>"],"mappings":";;uBACAA,mBAAA,CAiEM,cAhEFC,mBAAA,8nBAeU,EACVA,mBAAA,8zBAkCU,EACVA,mBAAA,4WAYU,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}