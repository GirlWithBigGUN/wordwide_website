{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport PostForm from \"@/components/PostForm\";\nimport PostList from \"@/components/PostList\";\nimport PostItem from \"@/components/PostItem\";\nimport axios from 'axios';\nimport { mapState, mapGetters, mapActions, mapMutations } from 'vuex';\nexport default {\n  components: {\n    PostForm,\n    PostList,\n    PostItem\n  },\n  data() {\n    return {\n      dialogVisible: false\n    };\n  },\n  methods: {\n    ...mapMutations({\n      setPage: 'post/setPage'\n    }),\n    ...mapActions({\n      loadMorePosts: 'post/loadMorePosts',\n      fetchPosts: 'post/fetchPosts'\n    }),\n    createPost(post) {\n      this.posts.push(post);\n      this.dialogVisible = false;\n    },\n    removePost(post) {\n      this.posts = this.posts.filter(p => p.id !== post.id);\n    },\n    showDialog() {\n      this.dialogVisible = true;\n    }\n    // changePage(pageNumber){\n    //     this.page = pageNumber\n    // },\n  },\n\n  mounted() {\n    //this.fetchPosts();\n    // const option ={\n    //     rootMargin:'0px',\n    //     threshold:1.0\n    // }\n    // const callback = (entries,observer) => {\n    //     if(entries[0].isIntersecting && this.page<this.totalPages){\n    //         this.loadMorePosts()\n    //     }\n    // };\n    // const observer = new IntersectionObserver(callback,option);\n    // observer.observe(this.$refs.observer);\n  },\n  computed: {\n    ...mapState({\n      posts: state => state.post.posts,\n      isPostsLoading: false,\n      selectedSort: state => state.post.posts,\n      searchQuery: state => state.post.posts,\n      page: state => state.post.posts,\n      limit: state => state.post.posts,\n      totalPages: state => state.post.posts,\n      SortOptions: state => state.post.posts\n    }),\n    ...mapGetters({\n      sortedPosts: 'post/sortedPosts',\n      sortedAndSearchedPosts: 'post/sortedAndSearchedPosts'\n    })\n  },\n  watch: {\n    // page(){\n    //     this.fetchPosts()\n    // }\n  }\n};","map":{"version":3,"names":["PostForm","PostList","PostItem","axios","mapState","mapGetters","mapActions","mapMutations","components","data","dialogVisible","methods","setPage","loadMorePosts","fetchPosts","createPost","post","posts","push","removePost","filter","p","id","showDialog","mounted","computed","state","isPostsLoading","selectedSort","searchQuery","page","limit","totalPages","SortOptions","sortedPosts","sortedAndSearchedPosts","watch"],"sources":["D:\\folderforsite\\src\\pages\\PostPagewithstore.vue"],"sourcesContent":["<template>\r\n<div>\r\n    <h1>\r\n        Page with posts\r\n    </h1>\r\n    <my-input\r\n        v-model=\"searchQuery\"\r\n        placeholder=\"Search\"\r\n        v-focus\r\n    />\r\n    <div class=\"app__btns\">\r\n        <my-button\r\n        @click=\"showDialog\"\r\n    >\r\n        Create Post\r\n    </my-button>\r\n    <!-- <my-select\r\n        v-model=\"selectedSort\"\r\n        :options=\"SortOptions\"\r\n    /> -->\r\n    </div>\r\n    \r\n    <my-dialog v-model:show='dialogVisible'>\r\n        <post-form\r\n        @create=\"createPost\"\r\n        />\r\n    </my-dialog>\r\n    \r\n    <post-list\r\n    :posts=\"sortedAndSearchedPosts\"\r\n    @remove=\"removePost\"\r\n    v-if=\"!isPostsLoading\"\r\n    />\r\n    <div v-else>Now Loading . . .</div>\r\n    <div v-intersection=\"loadMorePosts\" class=\"observer\">\r\n\r\n    </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport PostForm from \"@/components/PostForm\";\r\nimport PostList from \"@/components/PostList\";\r\nimport PostItem from \"@/components/PostItem\";\r\nimport axios from 'axios';\r\nimport {mapState, mapGetters, mapActions,mapMutations} from 'vuex'\r\nexport default {\r\n    components: {\r\n        PostForm, PostList,PostItem\r\n    },\r\n    data() {\r\n        return{\r\n            dialogVisible:false,\r\n        }\r\n    },\r\n    methods: {\r\n        ...mapMutations({\r\n            setPage:'post/setPage'\r\n        }),\r\n        ...mapActions({\r\n            loadMorePosts: 'post/loadMorePosts',\r\n            fetchPosts: 'post/fetchPosts'\r\n        }),\r\n        createPost(post) {\r\n            this.posts.push(post);\r\n            this.dialogVisible = false\r\n        },\r\n        removePost(post){\r\n            this.posts = this.posts.filter(p => p.id !== post.id)\r\n        },\r\n        showDialog(){\r\n            this.dialogVisible=true;\r\n        },\r\n        // changePage(pageNumber){\r\n        //     this.page = pageNumber\r\n        // },\r\n        \r\n    },\r\n    mounted(){\r\n        //this.fetchPosts();\r\n        // const option ={\r\n        //     rootMargin:'0px',\r\n        //     threshold:1.0\r\n        // }\r\n        // const callback = (entries,observer) => {\r\n        //     if(entries[0].isIntersecting && this.page<this.totalPages){\r\n        //         this.loadMorePosts()\r\n        //     }\r\n        // };\r\n        // const observer = new IntersectionObserver(callback,option);\r\n        // observer.observe(this.$refs.observer);\r\n    },\r\n    computed:{\r\n        ...mapState({\r\n            posts: state => state.post.posts,\r\n            isPostsLoading: false,\r\n            selectedSort:state => state.post.posts,\r\n            searchQuery:state => state.post.posts,\r\n            page:state => state.post.posts,\r\n            limit:state => state.post.posts,\r\n            totalPages:state => state.post.posts,\r\n            SortOptions:state => state.post.posts\r\n        }),\r\n        ...mapGetters({\r\n            sortedPosts:'post/sortedPosts',\r\n            sortedAndSearchedPosts:'post/sortedAndSearchedPosts'\r\n        }),\r\n    },\r\n    watch:{\r\n        // page(){\r\n        //     this.fetchPosts()\r\n        // }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.app__btns{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 15px 0;\r\n}\r\n.page__wrapper{\r\n    display: flex;\r\n    margin-top: 15px;\r\n}\r\n.page{\r\n    border: 1px solid black;\r\n    padding: 10px;\r\n}\r\n.current-page{\r\n    border: 2px solid teal;\r\n}\r\n.observer{\r\n    opacity: 0;\r\n    height:30px;\r\n    background: green;\r\n}\r\n</style>"],"mappings":";AAyCA,OAAOA,QAAO,MAAO,uBAAuB;AAC5C,OAAOC,QAAO,MAAO,uBAAuB;AAC5C,OAAOC,QAAO,MAAO,uBAAuB;AAC5C,OAAOC,KAAI,MAAO,OAAO;AACzB,SAAQC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAACC,YAAY,QAAO,MAAK;AACjE,eAAe;EACXC,UAAU,EAAE;IACRR,QAAQ;IAAEC,QAAQ;IAACC;EACvB,CAAC;EACDO,IAAIA,CAAA,EAAG;IACH,OAAM;MACFC,aAAa,EAAC;IAClB;EACJ,CAAC;EACDC,OAAO,EAAE;IACL,GAAGJ,YAAY,CAAC;MACZK,OAAO,EAAC;IACZ,CAAC,CAAC;IACF,GAAGN,UAAU,CAAC;MACVO,aAAa,EAAE,oBAAoB;MACnCC,UAAU,EAAE;IAChB,CAAC,CAAC;IACFC,UAAUA,CAACC,IAAI,EAAE;MACb,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,IAAI,CAAC;MACrB,IAAI,CAACN,aAAY,GAAI,KAAI;IAC7B,CAAC;IACDS,UAAUA,CAACH,IAAI,EAAC;MACZ,IAAI,CAACC,KAAI,GAAI,IAAI,CAACA,KAAK,CAACG,MAAM,CAACC,CAAA,IAAKA,CAAC,CAACC,EAAC,KAAMN,IAAI,CAACM,EAAE;IACxD,CAAC;IACDC,UAAUA,CAAA,EAAE;MACR,IAAI,CAACb,aAAa,GAAC,IAAI;IAC3B;IACA;IACA;IACA;EAEJ,CAAC;;EACDc,OAAOA,CAAA,EAAE;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACH;EACDC,QAAQ,EAAC;IACL,GAAGrB,QAAQ,CAAC;MACRa,KAAK,EAAES,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACC,KAAK;MAChCU,cAAc,EAAE,KAAK;MACrBC,YAAY,EAACF,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACC,KAAK;MACtCY,WAAW,EAACH,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACC,KAAK;MACrCa,IAAI,EAACJ,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACC,KAAK;MAC9Bc,KAAK,EAACL,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACC,KAAK;MAC/Be,UAAU,EAACN,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACC,KAAK;MACpCgB,WAAW,EAACP,KAAI,IAAKA,KAAK,CAACV,IAAI,CAACC;IACpC,CAAC,CAAC;IACF,GAAGZ,UAAU,CAAC;MACV6B,WAAW,EAAC,kBAAkB;MAC9BC,sBAAsB,EAAC;IAC3B,CAAC;EACL,CAAC;EACDC,KAAK,EAAC;IACF;IACA;IACA;EAAA;AAER"},"metadata":{},"sourceType":"module","externalDependencies":[]}