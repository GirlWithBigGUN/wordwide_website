{"ast":null,"code":"export const postModule = {\n  state: () => ({\n    posts: [],\n    isPostsLoading: false,\n    selectedSort: '',\n    searchQuery: '',\n    page: 1,\n    limit: 10,\n    totalPages: 0,\n    SortOptions: [{\n      value: 'title',\n      name: 'By Name'\n    }, {\n      value: 'body',\n      name: 'By Description'\n    }]\n  }),\n  getters: {\n    sortedPosts(state) {\n      return [state.posts].sort((post1, post2) => post1[state.selectedSort]?.localeCompare(post2[state.selectedSort]));\n    },\n    sortedAndSearchedPosts(state, getter) {\n      return getter.sortedPosts.filter(post => post.title.toLowerCase().includes(getter.searchQuery.toLowerCase()));\n    }\n  },\n  mutations: {\n    setPosts(state, posts) {\n      state.posts = posts;\n    },\n    setLoading(state, bool) {\n      state.isPostsLoading = bool;\n    },\n    setPage(state, page) {\n      state.page = page;\n    },\n    setSelectedSort(state, selectedSort) {\n      state.selectedSort = selectedSort;\n    },\n    setSearchQuery(state, searchQuery) {\n      state.searchQuery = searchQuery;\n    }\n  },\n  actions: {\n    async fetchPosts({\n      state,\n      commit\n    }) {\n      try {\n        commit('setLoading', true);\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n          params: {\n            _page: state.page,\n            _limit: state.limit\n          }\n        });\n        commit('setTotalPages', Math.ceil(response.headers['x-total-count'] / state.limit));\n        commit('setPosts', response.data);\n      } catch (e) {\n        alert('Error');\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    async loadMorePosts({\n      state,\n      commit\n    }) {\n      try {\n        commit('setPage', state.page + 1);\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\n          params: {\n            _page: state.page,\n            _limit: state.limit\n          }\n        });\n        commit('setTotalPages', Math.ceil(response.headers['x-total-count'] / state.limit));\n        commit('setPosts', [...this.posts, ...response.data]);\n      } catch (e) {\n        alert('Error');\n      } finally {}\n    }\n  },\n  namespaces: true\n};","map":{"version":3,"names":["postModule","state","posts","isPostsLoading","selectedSort","searchQuery","page","limit","totalPages","SortOptions","value","name","getters","sortedPosts","sort","post1","post2","localeCompare","sortedAndSearchedPosts","getter","filter","post","title","toLowerCase","includes","mutations","setPosts","setLoading","bool","setPage","setSelectedSort","setSearchQuery","actions","fetchPosts","commit","response","axios","get","params","_page","_limit","Math","ceil","headers","data","e","alert","loadMorePosts","namespaces"],"sources":["D:/folderforsite/src/store/postModule.js"],"sourcesContent":["export const postModule ={\r\n    state:() =>({\r\n        posts: [],\r\n        isPostsLoading: false,\r\n        selectedSort:'',\r\n        searchQuery:'',\r\n        page:1,\r\n        limit:10,\r\n        totalPages:0,\r\n        SortOptions:[\r\n            {value:'title', name:'By Name'},\r\n            {value:'body', name:'By Description'},\r\n        ]\r\n    }),\r\n    getters:{\r\n        sortedPosts(state){\r\n            return [state.posts].sort((post1,post2) => post1[state.selectedSort]?.localeCompare(post2[state.selectedSort]))\r\n        },\r\n        sortedAndSearchedPosts(state,getter){\r\n            return getter.sortedPosts.filter(post =>post.title.toLowerCase().includes(getter.searchQuery.toLowerCase()))\r\n        }\r\n    },\r\n    mutations:{\r\n        setPosts(state,posts){\r\n            state.posts=posts;\r\n        },\r\n        setLoading(state,bool){\r\n            state.isPostsLoading=bool;\r\n        },\r\n        setPage(state,page){\r\n            state.page=page;\r\n        },\r\n        setSelectedSort(state,selectedSort){\r\n            state.selectedSort=selectedSort;\r\n        },\r\n        setSearchQuery(state,searchQuery){\r\n            state.searchQuery=searchQuery;\r\n        },\r\n        \r\n    },\r\n    actions:{\r\n        async fetchPosts({state,commit}){\r\n            try {\r\n                commit('setLoading',true)\r\n                const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n                    params:{\r\n                        _page:state.page,\r\n                        _limit:state.limit\r\n                    }\r\n                \r\n                })\r\n                commit('setTotalPages', Math.ceil(response.headers['x-total-count']/state.limit))\r\n                commit('setPosts', response.data)\r\n                \r\n                \r\n            } catch (e){\r\n                alert('Error')\r\n            } finally{\r\n                commit('setLoading',false)\r\n            }\r\n        },\r\n        async loadMorePosts({state,commit}){\r\n            try {\r\n                commit('setPage', state.page + 1)\r\n                const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n                    params:{\r\n                        _page:state.page,\r\n                        _limit:state.limit\r\n                    }\r\n                \r\n                })\r\n                commit('setTotalPages', Math.ceil(response.headers['x-total-count']/state.limit))\r\n                commit('setPosts',[...this.posts,...response.data]);\r\n                \r\n                \r\n            } catch (e){\r\n                alert('Error')\r\n            } finally{\r\n            }\r\n        }\r\n    },\r\n    namespaces:true\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}